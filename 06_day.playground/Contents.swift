import Cocoa

//MARK: - loops (Циклы)
// Цикл for
// Используется, когда известно кол-во иттераций или надо обойти элементы массива
let platforms = ["iOS", "macOS", "tvOS", "watchOS"]

// печатаем массив строк
for os in platforms {
    print("Swift works great on \(os).")
}

// можно вывести диапазон чисел
for i in 1...5 {
    print("5 x \(i) is \(5 * i)")
}

// 1...5 диапазон чисел от 1 до 5 включительно!
for i in 1...5 {
    print("Counting from 1 through 5: \(i)")
}

// В английском языке
//  “1 to 5” означает 1, 2, 3 и 4, а “1 through 5” означает 1, 2, 3, 4 и 5

// 1...5 диапазон чисел от 1 до 5 НЕвключительно!
for i in 1..<5 {
    print("Counting 1 up to 5: \(i)")
}
/*
 Совет:
..< - очень полезен для работы с массивами,
 где мы считаем от 0 и часто хотим считать до,
 но исключая количество элементов в массиве
*/
let names = ["Piper", "Alex", "Suzanne", "Gloria"]
print(names[0]) //Piper
print(names[1...3]) //["Alex", "Suzanne", "Gloria"]

// !!! ОДНАКО - если мы не знаем кол-во элементов в массиве - мы можем написать так
print(names[1...]) // дай мне элемент с индексом 1 и до конца массива

// Если нам не нужна переменная итерации в цикле - то можно без нее
var lyric = "Haters gonna"
for _ in 1...5 {
    lyric += " hate"
}
print(lyric) //Haters gonna hate hate hate hate hate


// перебор Массива
let names1 = ["Sterling", "Cyril", "Lana", "Ray", "Pam"]

for name in names1 {
    print("\(name) is a secret agent")
}

// СОВЕТ - когда мы не используем переменную цикла (name) в цикле - то ставим _
// Это позволяет наглядно сразу понять, что мы не используем переменную в теле нашего цикла
let names2 = ["Sterling", "Cyril", "Lana", "Ray", "Pam"]

for _ in names2 {
    print("[CENSORED] is a secret agent!")
}

// НЕЛЬЗЯ зациклиться на Кортеже!!!
//let num = (1, 2, 3)
//for i in num { //For-in loop requires '(Int, Int, Int)' to conform to 'Sequence'
//    print(i)
//}


// Цикл while
// не так распространены, как for
// Используется когда не известно кол-во иттераций,
// но известно условие при котором цикл завершается
// - ползователь или сервер просит остановиться,
// - мы нашли ответ,
// - мы сгенерировали достаточное кол-во данных
var countdown = 10

while countdown > 0 {
    print("\(countdown)…")
    countdown -= 1
}
print("Blast off!")

/*
 Мы можем использовать эту функциональность с циклом while,
 чтобы бросать некоторые виртуальные 20-сторонние кости снова
 и снова, завершая цикл только тогда, когда бросок 20 -
 критический хит для всех вас, игроков Dungeons & Dragons.
 */
// random(in:) - выдает случайное число  Int или Double
let id = Int.random(in: 1...1000)
print(id) //каждый раз новое (рандомное) число выдает
// create an integer to store our roll
var roll = 0
// carry on looping until we reach 20
while roll != 20 {
    // roll a new dice and print what it was
    roll = Int.random(in: 1...20)
    print("I rolled a \(roll)")
}
// if we're here it means the loop ended – we got a 20!
print("Critical hit!")



// Swift дает нам два способа пропустить один или несколько элементов в цикле
// continue- пропустить текущую итерацию цикла
// break - а прерывание пропускает все оставшиеся итерации

let filenames = ["me.jpg", "work.txt", "sophie.jpg", "logo.psd"]

for filename in filenames {
    if filename.hasSuffix(".jpg") == false {
        continue // если расширение не .jpg - то итераций прерывается
    }
    print("Found picture: \(filename)")
}
//Found picture: me.jpg
//Found picture: sophie.jpg


let number1 = 4
let number2 = 14
var multiples = [Int]()

for i in 1...100_000 {
    if i.isMultiple(of: number1) && i.isMultiple(of: number2) {
        multiples.append(i)

        if multiples.count == 10 {
            break // как только кол-во будет равно 10 - ВЕСЬ цикл прерывается
        }
    }
}
print(multiples) //[28, 56, 84, 112, 140, 168, 196, 224, 252, 280]

// Например, мы хотим узнать сколько раз игрок получал очки, прежде чем получил ноль
let scores = [1, 8, 4, 3, 0, 5, 2]
var count = 0

for score in scores {
    if score == 0 {
        break
    }

    count += 1
}
print("You had \(count) scores before you got 0.")
//You had 4 scores before you got 0


//MARK: - summary
/*
 Мы используем операторы if для проверки истинности условия. Вы можете пройти в любом состоянии, которое хотите, но в конечном итоге оно должно сводиться к Boolean.
 Если хотите, вы можете добавить else блок и/или несколько  else if  блоков, чтобы проверить другие условия. Swift выполняет их по порядку.
 Вы можете комбинировать условия с помощью ||, что означает, что все условие истинно, если одно из подусловий истинно, или &&, что означает, что все условие истинно, если оба подусловия верны.
 Если вы часто повторяете одни и те же виды проверок, вы можете использовать вместо этого инструкцию switch. Они всегда должны быть исчерпывающими, что может означать добавление варианта по умолчанию.
 Если в одном из случаев switch используется fallthrough, это означает, что Swift выполнит следующий случай после этого. Это не используется обычно
 Тернарный условный оператор позволяет проверить WTF: What, True, False. Хотя сначала его немного трудно читать, вы увидите, что это часто используется в SwiftUI.
 for циклы позволяют нам циклически пересматривать массивы, наборы, словари и диапазоны. Вы можете назначить элементы переменной цикла и использовать ее внутри цикла, или вы можете использовать подчеркивание _, чтобы игнорировать переменную цикла.
 while циклы позволяют создавать пользовательские циклы, которые будут продолжать работать до тех пор, пока условие не станет ложным.
 Мы можем пропустить некоторые или все элементы цикла, используя continue или break соответственно.
 */


//MARK: - checkpoint 3
/*
Используется на собеседованиях, вступительных тестах в университет
 Ваша цель - цикл от 1 до 100, и для каждого числа:
 Если это кратно 3, распечатайте "Fizz"
 Если это кратно 5, распечатайте "Buzz"
 Если это кратно 3 и 5, распечатайте "FizzBuzz"
 В противном случае просто распечатайте номер.

 Итак, вот несколько примеров значений, которые вы должны иметь при запуске кода:
 1 должен печатать "1"
 2 должны печатать "2"
 3 должны печатать "Fizz"
 4 должны печатать "4"
 5 должны печатать "Buzz"
 6 должны напечатать "Fizz"
 7 должен печатать "7"
 ...
 15 должны печатать "FizzBuzz"
 ...
 100 должны печатать "Buzz"
 */

for i in 1...100 {

    if (i % 3 == 0) && (i % 5 == 0) {
        print("FizzBuzz")
    } else if i % 3 == 0 {
        print("Fizz")
    } else if i % 5 == 0 {
        print("Buzz")
    } else {
        print(i)
    }
}

// Вы можете проверить, является ли одно число кратным другому,
// используя .isMultiple(of:). Например, i.isMultiple (из: 3)
for i in 1...100 {

    if i.isMultiple(of: 3) && i.isMultiple(of: 5) {
        print("FizzBuzz")
    } else if i.isMultiple(of: 3) {
        print("Fizz")
    } else if i.isMultiple(of: 5) {
        print("Buzz")
    } else {
        print(i)
    }
}
